{"version":3,"sources":["serviceWorker.js","components/RoboCard.js","components/RoboCardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","RoboCard","props","state","isFlipped","handleClick","bind","e","preventDefault","this","setState","prevState","flipDirection","Card","style","width","height","backgroundColor","CardImg","top","src","id","alt","CardBody","CardTitle","name","CardSubtitle","email","Button","onClick","color","CardText","React","Component","divStyle","marginTop","RoboCardList","robots","cardComponent","map","user","i","Col","sm","Container","fluid","Row","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","overflowY","border","children","ErrorBoundary","hasError","error","errorInfo","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","textAlign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.037f708d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport {\n  Card, Button, CardImg, CardTitle, CardText,\n  CardSubtitle, CardBody, \n} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass RoboCard extends React.Component {\n    constructor(props) {\n      super();\n        this.state = {\n        isFlipped: false\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n   \n    handleClick(e) {\n      e.preventDefault();\n      this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n    }\n    \n    render () {\n      return (\n        <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"vertical\">\n                <div >\n                    <Card style={{width: 250, height: 450, backgroundColor: '#009999'}}>\n                        <CardImg top width=\"100%\"   src={`https://robohash.org/${this.props.id}?100x100`} alt=\"robots\" />\n                        <CardBody>\n                            <CardTitle>{this.props.name} </CardTitle>\n                            <CardSubtitle>{this.props.email}</CardSubtitle>\n                            <Button onClick={this.handleClick} color=\"primary\">Profile view</Button>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div >\n                    <Card style={{width: 250, height: 450, backgroundColor: 'powderblue'}}>\n                        <CardBody>\n                            <CardTitle>King of Chozha dynasty in 14th century </CardTitle>\n                            <CardSubtitle>Built Thanjai Periya Koil</CardSubtitle>\n                            <CardText>Great warroir </CardText>\n                            <Button onClick={this.handleClick} color=\"primary\">Picture</Button>\n                        </CardBody>\n                    </Card>\n                </div>\n        </ReactCardFlip>\n      )\n    }\n  }\n\n  export default RoboCard;\n","import React from 'react';\nimport RoboCard from './RoboCard';\n\nimport {\n     Container, Row, Col \n  } from 'reactstrap';\n\nconst divStyle = {\n    marginTop: '10px',\n};\n\nconst RoboCardList = ({robots}) => {\n    /*if(true){  // see errors in dev mode\n      throw new Error('Nooooooo');\n    }*/\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Col sm=\"3\" style={divStyle}> \n                <RoboCard  id={robots[i].id} name= {robots[i].name} email={robots[i].email}/> \n            </Col>\n        )\n    })\n    return (\n      <Container fluid>\n        <Row> \n                { cardComponent }\n        </Row> \n      </Container>\n    );\n}\n\nexport default RoboCardList;","import React from 'react';\nimport { Container } from 'reactstrap';\n\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return(\n            <div>\n                <Container className=\"themed-container\" fluid=\"sm\">\n                    <input \n                        type='search' \n                        placeholder='search robots' \n                        style={{backgroundColor: '#669999'}} \n                        onChange= { searchChange }\n                    />\n                </Container>\n            </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true})\n    }\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooops.  That is not good</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component} from 'react';\nimport RoboCardList from '../components/RoboCardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass  App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots: [],\n            searchfield: ''\n        }\n        console.log(this.state.robots)\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then( response =>{\n                return response.json()\n            })\n            .then(users => this.setState({ robots: users}))\n            console.log(this.state.robots)\n\n    }\n    onSearchChange=(event) =>{\n        this.setState({ searchfield: event.target.value})\n    }\n    render(){\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\n        });\n        return !robots.length? \n             <h1>Loading...</h1> :\n            (\n                \n                <div style={{textAlign: \"center\"}}>\n                    <h1 className=\"text-center\">Robo friends</h1>\n                    <SearchBox searchChange= {this.onSearchChange}/>\n                    <Scroll>\n                            <ErrorBoundary>\n                                <RoboCardList robots= { filteredRobots } />\n                            </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './containers/App';\n\n//import RoboCardList from './RoboCardList';\n\nReactDOM.render(\n  <React.StrictMode>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js\"></script>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js\"></script>\n      <App />   \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}